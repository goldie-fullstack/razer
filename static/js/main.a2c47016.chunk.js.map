{"version":3,"sources":["App.js","components/header.js","components/footer.js","containers/home.js","containers/about.js","containers/404.js","serviceWorker.js","index.js"],"names":["App","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","react_router_dom__WEBPACK_IMPORTED_MODULE_6__","basename","className","_components_header__WEBPACK_IMPORTED_MODULE_9__","react_router_dom__WEBPACK_IMPORTED_MODULE_7__","path","exact","component","Home","About","NoRouteMatch","_components_footer__WEBPACK_IMPORTED_MODULE_10__","Component","hot","module","Header","to","is404","Boolean","window","location","hostname","match","ReactDOM","render","react_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4NAaMA,mLAEF,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYC,SAAS,KACnBJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACI,EAAA,EAAD,MAEAN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWC,MACjCX,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOC,KAAK,SAASE,UAAWE,MAChCZ,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOG,UAAWG,OAGpBb,EAAAC,EAAAC,cAACY,EAAA,EAAD,eAbQC,aAoBHC,kBAAIC,EAAJD,CAAYjB,iJC7BLmB,mLAElB,OACElB,EAAAC,EAAAC,cAAA,mBAH+Ba,qICFhBG,mLAEjB,OACElB,EAAAC,EAAAC,cAAA,mBAH8Ba,qICCfJ,mLAGhB,OACEX,EAAAC,EAAAC,cAAA,QAAMG,UAAU,oBAJWU,6ICAbH,mLAEjB,OACEZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,qCACAF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMgB,GAAG,KAAT,wBAL2BJ,qICDdK,mLAEjB,OACEpB,EAAAC,EAAAC,cAAA,8BAH6Ba,mKCUfM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAA3B,EAAAC,cAACH,EAAA,EAAD,MAAS8B,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a2c47016.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { \n  HashRouter, \n  Route,\n  Switch,\n} from 'react-router-dom'\nimport { hot } from 'react-hot-loader'\n\nimport Header from './components/header'\nimport Footer from './components/footer'\nimport Home from './containers/home'\nimport About from './containers/about'\nimport NoRouteMatch from './containers/404'\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter basename=\"/\">\n        <div className=\"App\">\n          <Header />\n\n          <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/about\" component={About} />\n            <Route component={NoRouteMatch} />\n          </Switch>\n\n          <Footer />\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default hot(module)(App);\n","import React, { Component } from 'react'\r\n// import { Link } from 'react-router-dom'\r\n// import classnames from 'classnames'\r\n\r\n export default class Header extends Component {\r\n  render() {\r\n    return (\r\n      <div></div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Header extends Component {\r\n  render() {\r\n    return (\r\n      <div></div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default class Home extends Component { \r\n  render() {   \r\n    \r\n     return (\r\n       <main className=\"homepage\">\r\n\r\n       </main>\r\n     )\r\n  }\r\n}","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default class About extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>This is the About page</div>\r\n        <Link to=\"/\">Link to Home</Link>\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class is404 extends Component {\r\n  render() {\r\n    return (\r\n      <div>404 page</div>\r\n    )\r\n  }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}